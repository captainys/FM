NUM_RS232CMENU_OPTIONS	EQU	8

RS232CMENU_ITEMNUM_19200BPS		EQU	1
RS232CMENU_ITEMNUM_38400BPS		EQU	2
RS232CMENU_ITEMNUM_SENDTEST		EQU	3
RS232CMENU_ITEMNUM_RECVCMOS		EQU	4
RS232CMENU_ITEMNUM_RECVCMOS_CRC	EQU	5
RS232CMENU_ITEMNUM_SENDCMOS		EQU	6
RS232CMENU_ITEMNUM_DUMPROM		EQU	7



RS232CMENU				PROC

						MOVZX	SI,CS:[RS232CMENU_BAUD_RATE]
						MOV		AL,CS:[RS232CMENU_BAUD_RATE_TO_AL_TABLE+SI]
						CALL	RS232C2_INIT


RS232CMENU_OUTER_LOOP:
						CALL	MENU_WAIT_PAD_RELEASE
						CALL	CLEAR_FIVE_BELOW

						MOV		BYTE PTR CS:[RS232CMENU_ITEM_BAUD+1],' '
						MOV		BYTE PTR CS:[RS232CMENU_ITEM_BAUD2+1],' '

						MOV		SI,OFFSET RS232CMENU_ITEM_BAUD
						CMP		BYTE PTR CS:[RS232CMENU_BAUD_RATE],0
						JE		RS232CMENU_PUT_BAUD_X
						CALL	SKIP_CSTR_DS_SI
RS232CMENU_PUT_BAUD_X:
						MOV		BYTE PTR CS:[1+SI],'X'

						MOV		SI,OFFSET RS232CMENU_ITEM_BUFFER
						MOV		CX,NUM_RS232CMENU_OPTIONS
						CALL	DRAWMENU2

						MOV		CL,NUM_RS232CMENU_OPTIONS
						MOV		AL,CS:[RS232CMENU_CURSOR_POS]
						CALL	DRAWARROW

						TEXTLOCATION	01H,06H
						MOV		SI,OFFSET RS232CMENU_RECEIVE_STR
						CALL	PRINT_TALL

						MOV		AX,0113H
						MOV		SI,OFFSET RS232CMENU_SETTING_MSG
						CALL	DRAW_TEXT31K

RS232CMENU_WAIT_PAD:
						CALL	RS232C2_GETC
						JB		SHORT @f
						MOVZX	DI,BYTE PTR CS:[RS232CMENU_RECEIVE_BUF_PTR]
						AND		DI,1FH
						MOV		CS:[RS232CMENU_RECEIVE_BUF+DI],AL
						INC		BYTE PTR CS:[RS232CMENU_RECEIVE_BUF_PTR]

						TEXTLOCATION	01H,06H
						MOV		SI,OFFSET RS232CMENU_RECEIVE_STR
						CALL	PRINT_TALL

@@:
						CALL	READ_PADA
						CMP		AL,3FH
						JE		RS232CMENU_WAIT_PAD


						MOV		AH,CS:[RS232CMENU_CURSOR_POS]
						MOV		CH,NUM_RS232CMENU_OPTIONS
						CALL	MOVE_ARROW_BY_PAD
						MOV		CS:[RS232CMENU_CURSOR_POS],AH

						AND		AL,30H
						CMP		AL,30H
						JE		RS232CMENU_OUTER_LOOP


						MOV		AL,CS:[RS232CMENU_CURSOR_POS]
						MOVZX	SI,AL
						SHL		SI,1
						JMP		CS:[RS232CMENU_JUMP_TABLE+SI]

						;;;;;;;;;;;;;;;;

RS232CMENU_JMP_SETBAUD:
						; Select Baud Rate
						SUB		AL,RS232CMENU_ITEMNUM_19200BPS
						AND		AL,1
						MOV		CS:[RS232CMENU_BAUD_RATE],AL
						MOVZX	SI,AL
						MOV		AL,CS:[RS232CMENU_BAUD_RATE_TO_AL_TABLE+SI]
						CALL	RS232C2_INIT
						JMP		RS232CMENU_OUTER_LOOP

						;;;;;;;;;;;;;;;;

RS232CMENU_JMP_SENDTEST:
						CALL	RS232CMENU_SEND_TEST
						JMP		RS232CMENU_OUTER_LOOP

RS232CMENU_JMP_RECV_CMOS_CHECKSUM:
						MOV		AH,0	; Checksum mode
						CALL	RS232CMENU_RECEIVE_CMOS
						JMP		RS232CMENU_OUTER_LOOP

RS232CMENU_JMP_RECV_CMOS_CRC:
						MOV		AH,1	; CRC mode
						CALL	RS232CMENU_RECEIVE_CMOS
						JMP		RS232CMENU_OUTER_LOOP

RS232CMENU_JMP_SEND_CMOS:
						CALL	RS232CMENU_SEND_CMOS
						JMP		RS232CMENU_OUTER_LOOP

RS232CMENU_JMP_DUMPROM:
						CALL	RS232CMENU_SEND_ROMS
						JMP		RS232CMENU_OUTER_LOOP


RS232CMENU_EXIT:
						RET
RS232CMENU				ENDP



RS232CMENU_SEND_TEST	PROC
						PUSH	CS
						POP		DS

						MOV		SI,OFFSET RS232CMENU_SEND_TEST_TEXT
@@:
						LODSB
						CMP		AL,0
						JE		SHORT @f
						CALL	RS232C2_PUTC
						JMP		@b
@@:
						RET
RS232CMENU_SEND_TEST	ENDP

RS232CMENU_SEND_TEST_TEXT	DB	"HELLO FROM FM TOWNS RESCUE BOOT LOADER!",0DH,0AH,"BY CAPTAINYS",0DH,0AH,0


	                           ; 01234567890123456789012345678901234567890123456789012345678901234567890123456789
RS232CMENU_ITEM_BUFFER	DB		"RETURN TO MAIN MENU",0
RS232CMENU_ITEM_BAUD	DB		"[X] 19200bps",0
RS232CMENU_ITEM_BAUD2	DB		"[ ] 38400bps",0
						DB		"SEND TEST STRING",0
						DB		"RECEIVE (RESTORE) CMOS RAM XMODEM CheckSum Mode",0
						DB		"RECEIVE (RESTORE) CMOS RAM XMODEM CRC Mode",0
						DB		"SEND (BACKUP) CMOS RAM     XMODEM",0
						DB		"SEND (DUMP) ROM IMAGE      XMODEM",0

RS232CMENU_JUMP_TABLE	DW		OFFSET RS232CMENU_EXIT
						DW		OFFSET RS232CMENU_JMP_SETBAUD
						DW		OFFSET RS232CMENU_JMP_SETBAUD
						DW		OFFSET RS232CMENU_JMP_SENDTEST
						DW		OFFSET RS232CMENU_JMP_RECV_CMOS_CHECKSUM
						DW		OFFSET RS232CMENU_JMP_RECV_CMOS_CRC
						DW		OFFSET RS232CMENU_JMP_SEND_CMOS
						DW		OFFSET RS232CMENU_JMP_DUMPROM


RS232CMENU_CURSOR_POS	DB		0
RS232CMENU_BAUD_RATE	DB		1
RS232CMENU_BAUD_RATE_TO_AL_TABLE	DB	4,2

RS232CMENU_RECEIVE_STR		DB		"RECV TEST:"
RS232CMENU_RECEIVE_BUF      DB		32 dup(0),0
RS232CMENU_RECEIVE_BUF_PTR  DB		0

RS232CMENU_SETTING_MSG	DB		"8bit, No Parity, 1 stop bit",0
						DB		0
						DB		"I encourage you to dump your ROM image and keep it in a safe place",0
						DB		"if you haven't done yet.  There might be different versions of the",0
						DB		"system ROMs even for the same model, some of which may be rare.",0
						DB		"You may own a hardware with a rare version of the system ROM.",0
						DB		0FFH,0FFH


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



; AH  0:XMODEM Checksum   1:XMODEM CRC
RS232CMENU_RECEIVE_CMOS	PROC
						PUSH	AX
						CALL	CLEAR_FIVE_BELOW
						CALL	MENU_WAIT_PAD_RELEASE

						TEXTLOCATION	01H,06H
						MOV		SI,OFFSET RS232C_START_XMODEM__MSG
						CALL	PRINT_TALL

@@:
						CALL	READ_PADA
						CMP		AL,3FH
						JE		@b

						CALL	MENU_WAIT_PAD_RELEASE
						POP		AX

						AND		AH,AH
						JNE		RS232CMENU_RECEIVE_CMOS_CRC
						CALL	XMODEM_RECEIVE_INIT
						JMP		SHORT RS232CMENU_RECEIVE_CMOS_BEGIN

RS232CMENU_RECEIVE_CMOS_CRC:
						CALL	XMODEM_CRC_RECEIVE_INIT

RS232CMENU_RECEIVE_CMOS_BEGIN:
						; Receive Buffer
						MOV		DI,OFFSET UNCHARTED_TERRITORY

RS232CMENU_RECEIVE_CMOS_LOOP:
						CALL	XMODEM_RECEIVE_ONE_STEP
						JAE		RS232CMENU_RECEIVE_CMOS_NO_RECV

						CMP		DI,OFFSET UNCHARTED_TERRITORY+8192 ; Receiving more than 8K?
						JA		RS232CMENU_RECEIVE_CMOS_LOOP

						ADD		DI,128
						MOVZX	EAX,DI
						SUB		EAX,OFFSET UNCHARTED_TERRITORY

						PUSH	DI
						MOV		DI,OFFSET RS232C_CMOS_SIZE_MSG_BUF
						CALL	ITOX32
						TEXTLOCATION	01H,07H
						MOV		SI,OFFSET RS232C_CMOS_SIZE_MSG_BUF
						CALL	PRINT_TALL
						POP		DI

						JMP		RS232CMENU_RECEIVE_CMOS_LOOP

RS232CMENU_RECEIVE_CMOS_NO_RECV:
						CMP		AL,0FFH
						JNE		RS232CMENU_RECEIVE_CMOS_LOOP

						SUB		DI,OFFSET UNCHARTED_TERRITORY
						CMP		DI,8192
						JNE		RS232CMENU_RECEIVE_CMOS_WRONG_SIZE

						MOV		SI,OFFSET RS232C_CMOSLOAD_CONFIRM_1
						CALL	MENU_TRIPLE_CONFIRM
						AND		AH,AH
						JE		SHORT @f
						RET

@@:
						MOV		DX,0480H
						IN		AL,DX
						AND		AL,3
						PUSH	AX
						MOV		AL,1
						OUT		DX,AL

						PUSH	ES
						MOV		AX,0D800H
						MOV		ES,AX
						MOV		SI,OFFSET UNCHARTED_TERRITORY
						XOR		DI,DI
						MOV		CX,2000H
						REP		MOVSB
						POP		ES

						POP		AX
						OUT		DX,AL

						; Just in case >>
						MOV		SI,OFFSET UNCHARTED_TERRITORY
						MOV		DX,3000H
@@:
						LODSB
						OUT		DX,AL
						ADD		DX,2
						CMP		DX,4000H
						JNE		@b
						; Just in case <<

						CALL	CLEAR_FIVE_BELOW
						MOV		AX,0107H
						MOV		SI,OFFSET RS232C_NEED_RESET_MESSAGE
						CALL	DRAW_TEXT31K

@@:
						JMP		@b

						RET



RS232CMENU_RECEIVE_CMOS_WRONG_SIZE:
						CALL	MENU_WAIT_PAD_RELEASE
						CALL	CLEAR_FIVE_BELOW

						TEXTLOCATION	01H,07H
						MOV		SI,OFFSET RS232C_WRONG_CMOSSIZE_MSG
						CALL	PRINT_TALL

@@:
						CALL	READ_PADA
						CMP		AL,3FH
						JE		@b

						RET


RS232CMENU_RECEIVE_CMOS	ENDP

RS232C_START_XMODEM__MSG	DB "START XMODEM-SEND IN THE TERMINAL AND PUSH PAD0 BUTTON",0
RS232C_CMOS_SIZE_MSG_BUF	DB "00000000/00002000",0

RS232C_WRONG_CMOSSIZE_MSG	DB "WRONG SIZE.  CMOS IMAGE IS SUPPOSED TO BE 8KB (8192 bytes)",0


RS232C_CMOSLOAD_CONFIRM_1	DB	"CONFIRM WRITE TO CMOS RAM",0
							DB	"DON'T WRITE TO CMOS RAM",0
RS232C_CMOSLOAD_CONFIRM_2	DB	"REALLY WRITE TO CMOS RAM",0
							DB	"DON'T WRITE TO CMOS RAM",0
RS232C_CMOSLOAD_CONFIRM_3	DB	"ABSOLUTELY RESET CMOS RAM",0
							DB	"DON'T WRITE TO CMOS",0


RS232C_NEED_RESET_MESSAGE	DB	"CMOS OVERWRITTEN BY THE BINARY RECEIVED VIA RS232C.",0
							DB	"TO BE SAFE, SYSROM SHOULD CHECK THE VALIDITY OF THE",0
							DB	"CMOS RAM, WHICH WILL BE DONE DURING THE INITIAL BOOT",0
							DB	"PROCESS.",0
							DB	0
							DB	"PLEASE USE THE RESET BUTTON TO RESTART TOWNS.",0
							DB	0FFH,0FFH


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


RS232CMENU_SEND_CMOS	PROC

						; Copy CMOS to buffer.
						PUSH	ES
						PUSH	DS

						MOV		DX,0480H
						IN		AL,DX
						AND		AL,3
						PUSH	AX
						MOV		AL,1
						OUT		DX,AL

						MOV		AX,0D800H
						MOV		DS,AX
						XOR		SI,SI
						PUSH	CS
						POP		ES
						MOV		DI,OFFSET UNCHARTED_TERRITORY
						MOV		CX,2000H
						REP		MOVSB

						POP		AX
						OUT		DX,AL

						; Just in case >>
						MOV		DI,OFFSET UNCHARTED_TERRITORY
						MOV		DX,3000H
@@:
						IN		AL,DX
						STOSB
						ADD		DX,2
						CMP		DX,4000H
						JNE		@b
						; Just in case <<

						POP		DS
						POP		ES


						CALL	CLEAR_FIVE_BELOW
						CALL	MENU_WAIT_PAD_RELEASE

						TEXTLOCATION	01H,06H
						MOV		SI,OFFSET RS232C_START_XMODEM_RECV_MSG
						CALL	PRINT_TALL

						CALL	XMODEM_SEND_INIT
						MOV		SI,OFFSET UNCHARTED_TERRITORY
						MOV		AH,0

RS232CMENU_SEND_CMOS_OUTER_LOOP:
						CALL	XMODEM_SEND_ONE_STEP
						JAE		RS232CMENU_SEND_CMOS_OUTER_NO_DATA

						ADD		SI,128

						PUSH	SI
						PUSH	AX

						MOVZX	EAX,SI
						SUB		EAX,OFFSET UNCHARTED_TERRITORY
						MOV		DI,OFFSET RS232C_CMOS_SIZE_MSG_BUF
						CALL	ITOX32

						TEXTLOCATION	01H,07H
						MOV		SI,OFFSET RS232C_CMOS_SIZE_MSG_BUF
						CALL	PRINT_TALL

						POP		AX
						POP		SI

						CMP		SI,OFFSET UNCHARTED_TERRITORY+8192
						JB		RS232CMENU_SEND_CMOS_OUTER_LOOP
						MOV		AH,1
						JMP		RS232CMENU_SEND_CMOS_OUTER_LOOP

RS232CMENU_SEND_CMOS_OUTER_NO_DATA:
						CMP		AL,0FFH
						JNE		RS232CMENU_SEND_CMOS_OUTER_LOOP

						RET

RS232CMENU_SEND_CMOS	ENDP


RS232C_START_XMODEM_RECV_MSG	DB		"START XMODEM-RECEIVE ON THE TERMINAL",0



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

MYTOWNS_INFO		DB		"MYTOWNS.ROM "
					DD		32,0

ROMINFO_SIZE		EQU		20	; 12 for file name, 4 for size, 4 for physical address

FMT_SYS_INFO		DB		"FMT_SYS.ROM "
					DD		FMT_SYS_SIZE,FMT_SYS_START
FMT_DOS_INFO		DB		"FMT_DOS.ROM "
					DD		FMT_DOS_SIZE,FMT_DOS_START
FMT_DIC_INFO		DB		"FMT_DIC.ROM "
					DD		FMT_DIC_SIZE,FMT_DIC_START
FMT_FNT_INFO		DB		"FMT_FNT.ROM "
					DD		FMT_FNT_SIZE,FMT_FNT_START
FMT_F20_INFO		DB		"FMT_F20.ROM "
					DD		FMT_F20_SIZE,FMT_F20_START

FMT_SYS_INFO_386SX	DB		"FMT_SYS.ROM "
					DD		FMT_SYS_SIZE,FMT_SYS_386SX_START
FMT_DOS_INFO_386SX	DB		"FMT_DOS.ROM "
					DD		FMT_DOS_SIZE,FMT_DOS_386SX_START
FMT_DIC_INFO_386SX	DB		"FMT_DIC.ROM "
					DD		FMT_DIC_SIZE,FMT_DIC_386SX_START
FMT_FNT_INFO_386SX	DB		"FMT_FNT.ROM "
					DD		FMT_FNT_SIZE,FMT_FNT_386SX_START

RS232C_DUMP_ROMS_BUFFER_USED	DW		0	; 128-byte XMODEM buffer usage
RS232C_DUMP_ROM_INFO_PTR		DW		0	; Point to FMT_***_INFO or FMT_**_INFO_386SX
RS232C_DUMP_ROM_PTR				DD		0	; Pointer to the physical address
RS232C_DUMP_ROM_SIZE_LEFT		DD		0
RS232C_DUMP_ROM_HEADER_WRITTEN	DB		0	; 0 Header Not Written Yet,  1 Header Written
RS232C_DUMP_ROM_LEFT			DB		0	; Number of ROMS left.
RS232C_DUMP_ROM_TOTAL_TFRED		DD		0	; Total bytes transferred

RS232C_ROM_SIZE_MSG_BUF		DB "00000000/002000080",0

RS232CMENU_SEND_ROMS	PROC
					CALL	CLEAR_FIVE_BELOW
					CALL	MENU_WAIT_PAD_RELEASE

					TEXTLOCATION	01H,06H
					MOV		SI,OFFSET RS232C_START_XMODEM_RECV_MSG
					CALL	PRINT_TALL

					CALL	RS232CMENU_CLEAR_SEND_BUFFER
					CALL	RS232CMENU_SEND_ROMS_FILL_INIT_SERIALROM
					; CS:[RS232C_DUMP_ROMS_BUFFER_USED] is initialized to 48 in RS232CMENU_SEND_ROMS_FILL_INIT_SERIALROM

					MOV		WORD PTR CS:[RS232C_DUMP_ROM_INFO_PTR],OFFSET FMT_SYS_INFO
					MOV		BYTE PTR CS:[RS232C_DUMP_ROM_LEFT],5
					MOV		BYTE PTR CS:[RS232C_DUMP_ROM_HEADER_WRITTEN],0
					MOV		DWORD PTR CS:[RS232C_DUMP_ROM_TOTAL_TFRED],0

					IN		AL,0030H
					AND		AL,7
					CMP		AL,3	; 80386SX
					JNE		SHORT @f

					MOV		WORD PTR CS:[RS232C_DUMP_ROM_INFO_PTR],OFFSET FMT_SYS_INFO_386SX
					MOV		BYTE PTR CS:[RS232C_DUMP_ROM_LEFT],4
@@:

					CALL	RS232CMENU_SEND_ROM_FILL_NEXT

					CALL	XMODEM_SEND_INIT
					MOV		AH,0
RS232CMENU_SEND_ROMS_LOOP:
					MOV		SI,OFFSET UNCHARTED_TERRITORY
					CALL	XMODEM_SEND_ONE_STEP
					JAE		RS232CMENU_SEND_ROMS_NO_DATA

					PUSH	AX
					CALL	RS232CMENU_CLEAR_SEND_BUFFER
					CALL	RS232CMENU_SEND_ROM_FILL_NEXT
					POP		AX

					MOVZX	EDX,DX
					ADD		CS:[RS232C_DUMP_ROM_TOTAL_TFRED],EDX

					PUSH	AX
					PUSH	DX

					MOV		EAX,CS:[RS232C_DUMP_ROM_TOTAL_TFRED]
					MOV		DI,OFFSET RS232C_ROM_SIZE_MSG_BUF
					CALL	ITOX32

					TEXTLOCATION	01H,07H
					MOV		SI,OFFSET RS232C_ROM_SIZE_MSG_BUF
					CALL	PRINT_TALL

					POP		DX
					POP		AX

					AND		DX,DX
					JNE		RS232CMENU_SEND_ROMS_LOOP
					MOV		AH,1
					JMP		RS232CMENU_SEND_ROMS_LOOP

RS232CMENU_SEND_ROMS_NO_DATA:
					CMP		AL,0FFH
					JNE		RS232CMENU_SEND_ROMS_LOOP

					RET
RS232CMENU_SEND_ROMS	ENDP

RS232CMENU_SEND_ROMS_FILL_INIT_SERIALROM	PROC
					PUSH	ES

					MOV		RS232C_DUMP_ROMS_BUFFER_USED,48	; 16 bytes header + 32 bytes Seiral ROM

					MOV		SI,OFFSET MYTOWNS_INFO
					PUSH	CS
					POP		ES
					MOV		DI,OFFSET UNCHARTED_TERRITORY
					MOV		CX,16
					REP MOVSB

					CALL	READ_SERIAL_ROM

					POP		ES
					RET
RS232CMENU_SEND_ROMS_FILL_INIT_SERIALROM	ENDP

; Output
;   DX  Number of bytes written to the buffer.
RS232CMENU_SEND_ROM_FILL_NEXT	PROC
					XOR		DX,DX
					CMP		BYTE PTR CS:[RS232C_DUMP_ROM_LEFT],0
					JNE		SHORT @f
					RET
@@:
					PUSH	ES

					PUSH	CS
					POP		ES

RS232CMENU_SEND_ROM_FILL_NEXT_OUTER_LOOP:
					; while buffer_usage<128
					MOVZX	DI,BYTE PTR CS:[RS232C_DUMP_ROMS_BUFFER_USED]
					ADD		DI,OFFSET UNCHARTED_TERRITORY

					CMP		BYTE PTR CS:[RS232C_DUMP_ROMS_BUFFER_USED],128
					JAE		RS232CMENU_SEND_ROM_FILL_NEXT_EXIT

					CMP		BYTE PTR CS:[RS232C_DUMP_ROM_HEADER_WRITTEN],0
					JNE		SHORT @f	; Jump if header is already written

					; Write header
					MOV		CX,16
					MOV		SI,CS:[RS232C_DUMP_ROM_INFO_PTR]
					REP MOVSB
					ADD		BYTE PTR CS:[RS232C_DUMP_ROMS_BUFFER_USED],16
					MOV		ECX,CS:[SI-4]
					MOV		CS:[RS232C_DUMP_ROM_SIZE_LEFT],ECX
					MOV		ECX,CS:[SI]
					MOV		CS:[RS232C_DUMP_ROM_PTR],ECX

					MOV		BYTE PTR CS:[RS232C_DUMP_ROM_HEADER_WRITTEN],1
					ADD		DX,16	; DX is bytes transferred
					JMP		RS232CMENU_SEND_ROM_FILL_NEXT_OUTER_LOOP

@@:
					MOV		CL,128
					SUB		CL,BYTE PTR CS:[RS232C_DUMP_ROMS_BUFFER_USED]
					MOVZX	ECX,CL
					CMP		ECX,CS:[RS232C_DUMP_ROM_SIZE_LEFT]
					JLE		SHORT @f
					MOV		ECX,CS:[RS232C_DUMP_ROM_SIZE_LEFT]
@@:
					; Destination is ES:DI
					; ECX is bytes copied
					MOV		ESI,CS:[RS232C_DUMP_ROM_PTR]	; Source Physical Address

					ADD		BYTE PTR CS:[RS232C_DUMP_ROMS_BUFFER_USED],CL
					SUB		DWORD PTR CS:[RS232C_DUMP_ROM_SIZE_LEFT],ECX
					ADD		DWORD PTR CS:[RS232C_DUMP_ROM_PTR],ECX
					ADD		DX,CX	; DX is bytes transferred

					CALL	READ_HIGHB

					CMP		DWORD PTR CS:[RS232C_DUMP_ROM_SIZE_LEFT],0
					JNE		RS232CMENU_SEND_ROM_FILL_NEXT_OUTER_LOOP

					; One ROM done.
					ADD		WORD PTR CS:[RS232C_DUMP_ROM_INFO_PTR],ROMINFO_SIZE
					MOV		BYTE PTR CS:[RS232C_DUMP_ROM_HEADER_WRITTEN],0
					DEC		BYTE PTR CS:[RS232C_DUMP_ROM_LEFT]
					JNE		RS232CMENU_SEND_ROM_FILL_NEXT_OUTER_LOOP

RS232CMENU_SEND_ROM_FILL_NEXT_EXIT:
					POP		ES
					RET
RS232CMENU_SEND_ROM_FILL_NEXT	ENDP


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


RS232CMENU_CLEAR_SEND_BUFFER	PROC
					PUSH	ES

					MOV		BYTE PTR CS:[RS232C_DUMP_ROMS_BUFFER_USED],0

					PUSH	CS
					POP		ES
					MOV		CX,128
					MOV		DI,OFFSET UNCHARTED_TERRITORY
					XOR		AL,AL
					REP	 STOSB

					POP		ES
					RET
RS232CMENU_CLEAR_SEND_BUFFER	ENDP
